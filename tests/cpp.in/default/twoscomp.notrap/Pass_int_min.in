SUFFIXES h hpp
// (C)2009 Kenneth Boyd, license: MIT.txt

#include <limits.h>

// two's complement: obvious INT_MIN is trap representation
// check internal relations
TRUE_EXPRESSION -(INT_MIN+1)==INT_MAX
TRUE_EXPRESSION -(LONG_MIN+1)==LONG_MAX
TRUE_EXPRESSION -(LLONG_MIN+1)==LLONG_MAX

// non-trapping machines accept LLONG_MIN
// | : impractical (have to start with obvious INT_MIN)
// ~ : use INT_MAX
// ^ : try INT_MAX vs -1 (randdriver)
// & : (randdriver)
TRUE_EXPRESSION INT_MIN==~INT_MAX
TRUE_EXPRESSION LONG_MIN==~LONG_MAX
TRUE_EXPRESSION LLONG_MIN==~LLONG_MAX

// spot-check ^
TRUE_EXPRESSION INT_MIN==(INT_MAX ^ -1)
TRUE_EXPRESSION LONG_MIN==(LONG_MAX ^ -1L)
TRUE_EXPRESSION LLONG_MIN==(LLONG_MAX ^ -1LL)

// spot-check &
TRUE_EXPRESSION INT_MIN==(INT_MIN+1 & INT_MIN+2)
TRUE_EXPRESSION LONG_MIN==(LONG_MIN+1 & LONG_MIN+2)
TRUE_EXPRESSION LLONG_MIN==(LLONG_MIN+1 & LLONG_MIN+2)

// now, see if the bitwise operators can cope
// ~
TRUE_EXPRESSION ~INT_MIN==INT_MAX
TRUE_EXPRESSION ~LONG_MIN==LONG_MAX
TRUE_EXPRESSION ~LLONG_MIN==LLONG_MAX

// |
TRUE_EXPRESSION -1==(INT_MIN|INT_MAX)
TRUE_EXPRESSION -1==(INT_MAX|INT_MIN)
TRUE_EXPRESSION -1==(LONG_MIN|LONG_MAX)
TRUE_EXPRESSION -1==(LONG_MAX|LONG_MIN)
TRUE_EXPRESSION -1==(LLONG_MIN|LLONG_MAX)
TRUE_EXPRESSION -1==(LLONG_MAX|LLONG_MIN)
TRUE_EXPRESSION LLONG_MIN==(LLONG_MIN|LLONG_MIN)

// &
TRUE_EXPRESSION 0==(INT_MIN&INT_MAX)
TRUE_EXPRESSION 0==(INT_MAX&INT_MIN)
TRUE_EXPRESSION 0==(LONG_MIN&LONG_MAX)
TRUE_EXPRESSION 0==(LONG_MAX&LONG_MIN)
TRUE_EXPRESSION 0==(LLONG_MIN&LLONG_MAX)
TRUE_EXPRESSION 0==(LLONG_MAX&LLONG_MIN)

// ^
TRUE_EXPRESSION -1==(INT_MIN^INT_MAX)
TRUE_EXPRESSION -1==(INT_MAX^INT_MIN)
TRUE_EXPRESSION -1==(LONG_MIN^LONG_MAX)
TRUE_EXPRESSION -1==(LONG_MAX^LONG_MIN)
TRUE_EXPRESSION -1==(LLONG_MIN^LLONG_MAX)
TRUE_EXPRESSION -1==(LLONG_MAX^LLONG_MIN)
TRUE_EXPRESSION 0==(INT_MIN^INT_MIN)
TRUE_EXPRESSION 0==(LONG_MIN^LONG_MIN)
TRUE_EXPRESSION 0==(LLONG_MIN^LLONG_MIN)

