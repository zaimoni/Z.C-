SUFFIXES h hpp
// check that we recognize a variety of zero literals as zero
// (C)2009 Kenneth Boyd, license: MIT.txt

/* While string literals are not allowed in integer constant expressions [C99 6.6p6], we are allowed to accept other forms of constant expressions [C99 6.6p10] */
/* spot-check array-dereferencing end of string literal */
FALSE_EXPRESSION "A"[1]
FALSE_EXPRESSION L"A"[1]
FALSE_EXPRESSION 1["A"]
FALSE_EXPRESSION 1[L"A"]

/* spot-check array-dereferencing end of empty string literal */
FALSE_EXPRESSION ""[0]
FALSE_EXPRESSION L""[0]
FALSE_EXPRESSION 0[""]
FALSE_EXPRESSION 0[L""]

/* deference empty string literal */
FALSE_EXPRESSION *""
FALSE_EXPRESSION *L""

/* spot-check logical negation of string literal */
FALSE_EXPRESSION !""
FALSE_EXPRESSION !L""
FALSE_EXPRESSION !"A"
FALSE_EXPRESSION !L"A"

// hyper-optimizing linker would put identical string literals at identical locations
FALSE_EXPRESSION "A"-"A"
FALSE_EXPRESSION L"A"-L"A"

FALSE_EXPRESSION "A"!="A"
FALSE_EXPRESSION "A"=="B"
FALSE_EXPRESSION L"A"!=L"A"
FALSE_EXPRESSION L"A"==L"B"
FALSE_EXPRESSION L"A"=="A"
FALSE_EXPRESSION L"A"=="B"
FALSE_EXPRESSION "A"==L"A"
FALSE_EXPRESSION "A"==L"B"

// spot-check comparison of strings to null pointer constant
FALSE_EXPRESSION 0=="A"
FALSE_EXPRESSION 0==L"A"
FALSE_EXPRESSION "A"==0
FALSE_EXPRESSION L"A"==0

// spot-check ? : operator null-pointer coercion
FALSE_EXPRESSION !!(0 ? "A" : 0)
FALSE_EXPRESSION !!(1 ? 0 : "A")

