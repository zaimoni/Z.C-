SUFFIXES h hpp
OBJECTLIKE_MACRO STATIC_ASSERT _Static_assert static_assert
// ZCC-specific check on extended constant expressions common to C and C++
// (C)2010 Kenneth Boyd, license: MIT.txt

// exercise string literal uses in (extended) integer constant expressions
STATIC_ASSERT("A","automatic success has failed");

STATIC_ASSERT("A"[0],"automatic success has failed");
STATIC_ASSERT(+"A"[0],"automatic success has failed");
STATIC_ASSERT(-"A"[0],"automatic success has failed");
STATIC_ASSERT(!"A"[1],"automatic success has failed");
STATIC_ASSERT(*"A","automatic success has failed");
STATIC_ASSERT(!*"","automatic success has failed");

STATIC_ASSERT("A"+0,"automatic success has failed");
STATIC_ASSERT(0+"A","automatic success has failed");
STATIC_ASSERT("A"+1,"automatic success has failed");
STATIC_ASSERT(1+"A","automatic success has failed");

STATIC_ASSERT("A"-0,"automatic success has failed");

STATIC_ASSERT("A"=="A","automatic success has failed");
STATIC_ASSERT("A"!="B","automatic success has failed");
STATIC_ASSERT("A"!=0,"automatic success has failed");
STATIC_ASSERT(0!="B","automatic success has failed");

STATIC_ASSERT(1==sizeof "","automatic success has failed");
STATIC_ASSERT(sizeof ""==1,"automatic success has failed");
STATIC_ASSERT(2==sizeof "A","automatic success has failed");
STATIC_ASSERT(sizeof "A"==2,"automatic success has failed");

STATIC_ASSERT(1==sizeof *"A","automatic success has failed");
STATIC_ASSERT(sizeof *"A"==1,"automatic success has failed");
STATIC_ASSERT(1==sizeof *"","automatic success has failed");
STATIC_ASSERT(sizeof *""==1,"automatic success has failed");

